{"ast":null,"code":"export default function getEmployees(_ref) {\n  let {\n    keyword,\n    id,\n    isVaccinated = \"\",\n    vaccinationType = \"\"\n  } = _ref;\n  const apiURL = `../data.json`;\n  return fetch(apiURL, {\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n  }).then(res => res.json()).then(response => {\n    const {\n      data = []\n    } = response; //   .filter(employee => userType ? employee.type === userType : employee.type === 'employee')\n    //  employees\n\n    if (Array.isArray(data)) {\n      const employees = data //   .filter(employee.type === userType)\n      .filter(employee => keyword ? employee.type === keyword : employee.type != keyword).filter(employee => isVaccinated ? employee.user.is_vaccinated == isVaccinated : employee.user.is_vaccinated != isVaccinated).filter(employee => vaccinationType ? employee.user.vaccination_info.vaccination_type == vaccinationType : employee.user.vaccination_info.vaccination_type != vaccinationType).map(employee => {\n        const {\n          type,\n          user,\n          image,\n          id\n        } = employee;\n        let {\n          url\n        } = image;\n        const {\n          username,\n          name,\n          lastname,\n          mail,\n          is_vaccinated,\n          identification,\n          vaccination_info\n        } = user; // just for radom avatars\n        // url = `https://avatars.dicebear.com/api/avataaars/${Math.random()*9999999}.svg`\n\n        return {\n          id,\n          type,\n          identification,\n          username,\n          name,\n          lastname,\n          mail,\n          url,\n          is_vaccinated,\n          vaccination_info\n        };\n      });\n      return employees;\n    }\n  });\n}","map":{"version":3,"names":["getEmployees","keyword","id","isVaccinated","vaccinationType","apiURL","fetch","headers","then","res","json","response","data","Array","isArray","employees","filter","employee","type","user","is_vaccinated","vaccination_info","vaccination_type","map","image","url","username","name","lastname","mail","identification"],"sources":["D:/ReactApps/inventario-vacunas/src/services/getEmployees.js"],"sourcesContent":["export default function getEmployees ({keyword, id, isVaccinated=\"\", vaccinationType=\"\"}) {\r\n    \r\n    const apiURL = `../data.json`;\r\n    return fetch(apiURL, {\r\n        headers : { \r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n         }\r\n      })\r\n      .then(res => res.json())\r\n      .then(response => {\r\n        const {data = [] } = response\r\n              //   .filter(employee => userType ? employee.type === userType : employee.type === 'employee')\r\n        //  employees\r\n        if(Array.isArray(data)) {\r\n\r\n\r\n          const employees = data\r\n        //   .filter(employee.type === userType)\r\n          .filter(employee => keyword ? employee.type === keyword: employee.type != keyword)\r\n          .filter(employee => isVaccinated ? employee.user.is_vaccinated == isVaccinated :  employee.user.is_vaccinated != isVaccinated)\r\n          .filter(employee => vaccinationType ? employee.user.vaccination_info.vaccination_type == vaccinationType :  employee.user.vaccination_info.vaccination_type != vaccinationType)\r\n          .map(employee => {    \r\n            const {type, user,image, id} = employee\r\n            let {url} = image\r\n            const {username, name, lastname, mail, is_vaccinated, identification, vaccination_info} = user\r\n            // just for radom avatars\r\n            // url = `https://avatars.dicebear.com/api/avataaars/${Math.random()*9999999}.svg`\r\n            return {id, type, identification, username, name, lastname, mail, url, is_vaccinated, vaccination_info}\r\n          })\r\n          return employees\r\n        }\r\n      })\r\n}"],"mappings":"AAAA,eAAe,SAASA,YAAT,OAA2E;EAAA,IAApD;IAACC,OAAD;IAAUC,EAAV;IAAcC,YAAY,GAAC,EAA3B;IAA+BC,eAAe,GAAC;EAA/C,CAAoD;EAEtF,MAAMC,MAAM,GAAI,cAAhB;EACA,OAAOC,KAAK,CAACD,MAAD,EAAS;IACjBE,OAAO,EAAG;MACR,gBAAgB,kBADR;MAER,UAAU;IAFF;EADO,CAAT,CAAL,CAMJC,IANI,CAMCC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EANR,EAOJF,IAPI,CAOCG,QAAQ,IAAI;IAChB,MAAM;MAACC,IAAI,GAAG;IAAR,IAAeD,QAArB,CADgB,CAEV;IACN;;IACA,IAAGE,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAH,EAAwB;MAGtB,MAAMG,SAAS,GAAGH,IAAI,CACxB;MADwB,CAErBI,MAFiB,CAEVC,QAAQ,IAAIhB,OAAO,GAAGgB,QAAQ,CAACC,IAAT,KAAkBjB,OAArB,GAA8BgB,QAAQ,CAACC,IAAT,IAAiBjB,OAFxD,EAGjBe,MAHiB,CAGVC,QAAQ,IAAId,YAAY,GAAGc,QAAQ,CAACE,IAAT,CAAcC,aAAd,IAA+BjB,YAAlC,GAAkDc,QAAQ,CAACE,IAAT,CAAcC,aAAd,IAA+BjB,YAH/F,EAIjBa,MAJiB,CAIVC,QAAQ,IAAIb,eAAe,GAAGa,QAAQ,CAACE,IAAT,CAAcE,gBAAd,CAA+BC,gBAA/B,IAAmDlB,eAAtD,GAAyEa,QAAQ,CAACE,IAAT,CAAcE,gBAAd,CAA+BC,gBAA/B,IAAmDlB,eAJ7I,EAKjBmB,GALiB,CAKbN,QAAQ,IAAI;QACf,MAAM;UAACC,IAAD;UAAOC,IAAP;UAAYK,KAAZ;UAAmBtB;QAAnB,IAAyBe,QAA/B;QACA,IAAI;UAACQ;QAAD,IAAQD,KAAZ;QACA,MAAM;UAACE,QAAD;UAAWC,IAAX;UAAiBC,QAAjB;UAA2BC,IAA3B;UAAiCT,aAAjC;UAAgDU,cAAhD;UAAgET;QAAhE,IAAoFF,IAA1F,CAHe,CAIf;QACA;;QACA,OAAO;UAACjB,EAAD;UAAKgB,IAAL;UAAWY,cAAX;UAA2BJ,QAA3B;UAAqCC,IAArC;UAA2CC,QAA3C;UAAqDC,IAArD;UAA2DJ,GAA3D;UAAgEL,aAAhE;UAA+EC;QAA/E,CAAP;MACD,CAZiB,CAAlB;MAaA,OAAON,SAAP;IACD;EACF,CA7BI,CAAP;AA8BH"},"metadata":{},"sourceType":"module"}